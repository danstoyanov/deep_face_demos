import streamlit as st
import cv2
import numpy as np
from utils import resize_image_for_display
# INSIGHTFACE_AVAILABLE —Å–µ –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –≤ main.py –ø—Ä–µ–¥–∏ –∏–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ render_page –Ω–∞ —Ç–æ–∑–∏ –º–æ–¥—É–ª
# MAX_DISPLAY_DIM —â–µ –±—ä–¥–µ –ø–æ–¥–∞–¥–µ–Ω –∫–∞—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç


def render_page(insightface_available_flag, insightface_model_app, max_display_dim_passed):
    st.header("–ê–Ω–∞–ª–∏–∑ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ü–æ–ª, –í—ä–∑—Ä–∞—Å—Ç —Å InsightFace)")
    st.write("–ö–∞—á–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞ –¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞—Ç–µ –ª–∏—Ü–∞—Ç–∞ –∑–∞ –ø–æ–ª –∏ –≤—ä–∑—Ä–∞—Å—Ç, –∏–∑–ø–æ–ª–∑–≤–∞–π–π–∫–∏ –º–æ–¥–µ–ª–∞ InsightFace 'buffalo_l'.")

    if not insightface_available_flag:
        st.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞ 'insightface' –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∞. –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞. –ú–æ–ª—è, –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ —è: `pip install insightface onnxruntime`")
        st.stop()

    if insightface_model_app is None:
        st.error(
            "InsightFace –º–æ–¥–µ–ª—ä—Ç ('buffalo_l') –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞.")
        st.stop()

    uploaded_img_file = st.file_uploader(
        "–ò–∑–±–µ—Ä–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"], key="insightface_image_analysis_uploader_module"
    )

    if uploaded_img_file is not None:
        file_bytes = np.asarray(
            bytearray(uploaded_img_file.read()), dtype=np.uint8)
        img_cv2_original_bgr = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

        if img_cv2_original_bgr is None:
            st.error(
                "–ù–µ –º–æ–∂–∞—Ö –¥–∞ –ø—Ä–æ—á–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ —Å –¥—Ä—É–≥ —Ñ–∞–π–ª.")
        else:
            st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
            img_display_resized_bgr = resize_image_for_display(
                img_cv2_original_bgr, max_display_dim_passed)
            img_display_resized_rgb = cv2.cvtColor(
                img_display_resized_bgr, cv2.COLOR_BGR2RGB)
            st.image(img_display_resized_rgb,
                     caption=f"–û—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({uploaded_img_file.name})", use_column_width='auto')

            if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ (InsightFace)", key="analyze_image_insightface_btn"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ª–∏—Ü–∞—Ç–∞ —Å InsightFace..."):
                    try:
                        # –ü–æ–¥–∞–≤–∞–º–µ –∫–æ–ø–∏–µ, –∑–∞ –¥–∞ –Ω–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è numpy –º–∞—Å–∏–≤
                        faces = insightface_model_app.get(
                            img_cv2_original_bgr.copy())
                    except Exception as e:
                        st.error(
                            f"–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ InsightFace –∞–Ω–∞–ª–∏–∑: {e}")
                        faces = []  # –ü—Ä–∞–∑–µ–Ω —Å–ø–∏—Å—ä–∫ –ø—Ä–∏ –≥—Ä–µ—à–∫–∞

                img_cv2_annotated_bgr = img_cv2_original_bgr.copy()

                if not faces:  # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–ø–∏—Å—ä–∫—ä—Ç —Å –ª–∏—Ü–∞ –µ –ø—Ä–∞–∑–µ–Ω
                    st.info(
                        f"–ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –ª–∏—Ü–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ ({uploaded_img_file.name}) –∏–ª–∏ –≤—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–∞.")
                else:
                    num_faces_processed = 0
                    for i, face_obj in enumerate(faces):
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ bbox –µ –Ω–∞–ª–∏—á–µ–Ω; gender –∏ age —Å–µ –∏–∑–≤–ª–∏—á–∞—Ç —Å getattr –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç
                        if not hasattr(face_obj, 'bbox') or face_obj.bbox is None:
                            st.caption(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–º –ª–∏—Ü–µ {i+1} –ø–æ—Ä–∞–¥–∏ –ª–∏–ø—Å–≤–∞—â–∏ –¥–∞–Ω–Ω–∏ –∑–∞ bbox.")
                            continue

                        num_faces_processed += 1
                        st.write(f"---")
                        st.write(f"#### –õ–∏—Ü–µ {num_faces_processed}:")

                        # 0 for female, 1 for male. -1 if not estimated.
                        gender_val = getattr(face_obj, 'gender', -1)
                        # age value. -1 if not estimated.
                        age_val = getattr(face_obj, 'age', -1)

                        gender_str = "N/A"
                        if gender_val == 0:
                            gender_str = "–ñ–µ–Ω–∞"
                        elif gender_val == 1:
                            gender_str = "–ú—ä–∂"

                        # –ü–æ–∫–∞–∑–≤–∞ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞ —Å–∞–º–æ –∞–∫–æ –µ > 0
                        age_str = str(int(age_val)) if age_val > 0 else "N/A"

                        st.write(f"- **–ü–æ–ª:** {gender_str}")
                        st.write(f"- **–í—ä–∑—Ä–∞—Å—Ç:** {age_str}")
                        # –ú–æ–∂–µ –¥–∞ —Å–µ –¥–æ–±–∞–≤–∏ –∏ det_score, –∞–∫–æ –µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
                        # if hasattr(face_obj, 'det_score'):
                        #     st.write(f"- –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è: {face_obj.det_score:.2f}")

                        bbox = face_obj.bbox.astype(int)
                        # bbox –µ [x1, y1, x2, y2]
                        x1, y1, x2, y2 = bbox[0], bbox[1], bbox[2], bbox[3]

                        cv2.rectangle(img_cv2_annotated_bgr,
                                      (x1, y1), (x2, y2), (0, 255, 0), 2)

                        text_gender_char = gender_str[0].upper(
                        ) if gender_str != "N/A" else "N"
                        text_age_display = age_str if age_str != "N/A" else "?"
                        text_info = f"–í: {text_age_display} –ü: {text_gender_char}"

                        y_text_offset = y1 - 10
                        if y_text_offset < 10:
                            y_text_offset = y1 + 15

                        cv2.putText(img_cv2_annotated_bgr, text_info, (x1, y_text_offset),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

                    if num_faces_processed > 0:
                        st.subheader("–ê–Ω–æ—Ç–∏—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (InsightFace):")
                        annotated_display_resized_bgr = resize_image_for_display(
                            img_cv2_annotated_bgr, max_display_dim_passed)
                        annotated_display_resized_rgb = cv2.cvtColor(
                            annotated_display_resized_bgr, cv2.COLOR_BGR2RGB)
                        st.image(annotated_display_resized_rgb,
                                 caption=f"–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –ª–∏—Ü–∞: {num_faces_processed}", use_column_width='auto')
                    elif faces and num_faces_processed == 0:
                        st.info(
                            f"–ù–∞–º–µ—Ä–µ–Ω–∏ —Å–∞ –æ–±–µ–∫—Ç–∏ ({len(faces)}), –Ω–æ –Ω–∏—Ç–æ –µ–¥–∏–Ω –Ω–µ –º–æ–∂–∞ –¥–∞ –±—ä–¥–µ –æ–±—Ä–∞–±–æ—Ç–µ–Ω –∫–∞—Ç–æ –≤–∞–ª–∏–¥–Ω–æ –ª–∏—Ü–µ –æ—Ç InsightFace –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ ({uploaded_img_file.name}).")
                    # –°–ª—É—á–∞—è—Ç 'if not faces:' –≤–µ—á–µ –µ –ø–æ–∫—Ä–∏—Ç –ø–æ-–≥–æ—Ä–µ
