# --- START OF FILE app/webcam_realtime_analysis.py ---
import streamlit as st
import cv2
import numpy as np
from deepface import DeepFace
import time


def render_page(deepface_models_loaded):
    st.header("4. –ê–Ω–∞–ª–∏–∑ –æ—Ç —É–µ–± –∫–∞–º–µ—Ä–∞ (–ü–æ–ª, –í—ä–∑—Ä–∞—Å—Ç, –ï–º–æ—Ü–∏—è - Real-time)")
    st.write("–°—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ —É–µ–± –∫–∞–º–µ—Ä–∞—Ç–∞ –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ª–∏—Ü–∞ –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ.")
    st.warning(
        "–ê–Ω–∞–ª–∏–∑—ä—Ç –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ –º–æ–∂–µ –¥–∞ –µ –±–∞–≤–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç –≤–∞—à–∏—è —Ö–∞—Ä–¥—É–µ—Ä.")

    if not deepface_models_loaded:
        st.error("DeepFace –º–æ–¥–µ–ª–∏—Ç–µ –Ω–µ —Å–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞.")
        st.stop()

    detector_backend_webcam = st.sidebar.selectbox(
        "DeepFace –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞ —É–µ–± –∫–∞–º–µ—Ä–∞:",
        ('opencv', 'ssd', 'mtcnn', 'retinaface', 'yunet'), index=0, key="webcam_detector_module")

    if 'webcam_running' not in st.session_state:
        st.session_state.webcam_running = False
    if 'cap_webcam' not in st.session_state:
        st.session_state.cap_webcam = None

    col_start, col_stop = st.columns(2)
    with col_start:
        if st.button("üöÄ –°—Ç–∞—Ä—Ç –Ω–∞ –∫–∞–º–µ—Ä–∞—Ç–∞", key="start_cam_button_module", disabled=st.session_state.webcam_running):
            st.session_state.webcam_running = True
            # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç, –∞–∫–æ cap_webcam —Å—ä—â–µ—Å—Ç–≤—É–≤–∞, –≥–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–º–µ, –∑–∞ –¥–∞ —Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –Ω–∞–Ω–æ–≤–æ
            if st.session_state.cap_webcam is not None:
                st.session_state.cap_webcam.release()
                st.session_state.cap_webcam = None
            st.rerun()

    with col_stop:
        if st.button("üõë –°—Ç–æ–ø –Ω–∞ –∫–∞–º–µ—Ä–∞—Ç–∞", key="stop_cam_button_module", disabled=not st.session_state.webcam_running):
            st.session_state.webcam_running = False
            st.rerun()  # –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ, –∑–∞ –¥–∞ –æ—Ç—Ä–∞–∑–∏–º –ø—Ä–æ–º—è–Ω–∞—Ç–∞ –∏ –¥–∞ —Å–ø—Ä–µ–º —Ü–∏–∫—ä–ª–∞

    image_placeholder = st.empty()

    if st.session_state.webcam_running:
        if st.session_state.cap_webcam is None:
            st.session_state.cap_webcam = cv2.VideoCapture(0)
            if not st.session_state.cap_webcam.isOpened():
                st.error(
                    "–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –æ—Ç–≤–æ—Ä–∏ —É–µ–± –∫–∞–º–µ—Ä–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –µ —Å–≤—ä—Ä–∑–∞–Ω–∞ –∏ –Ω–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –æ—Ç –¥—Ä—É–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
                st.session_state.webcam_running = False
                if st.session_state.cap_webcam is not None:
                    st.session_state.cap_webcam.release()  # –û—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–º–µ, –∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ
                st.session_state.cap_webcam = None
                st.rerun()  # –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ, –∑–∞ –¥–∞ —Å–µ –ø–æ–∫–∞–∂–µ –≥—Ä–µ—à–∫–∞—Ç–∞ –∏ –¥–∞ —Å–µ –Ω—É–ª–∏—Ä–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ

        if st.session_state.cap_webcam is not None and st.session_state.cap_webcam.isOpened():
            st.info("–£–µ–± –∫–∞–º–µ—Ä–∞—Ç–∞ –µ –∞–∫—Ç–∏–≤–Ω–∞...")
            while st.session_state.webcam_running:  # –¶–∏–∫—ä–ª—ä—Ç –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞, –¥–æ–∫–∞—Ç–æ webcam_running –µ True
                ret, frame_bgr = st.session_state.cap_webcam.read()
                if not ret:
                    st.warning(
                        "–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –ø—Ä–æ—á–µ—Ç–µ –∫–∞–¥—ä—Ä –æ—Ç —É–µ–± –∫–∞–º–µ—Ä–∞—Ç–∞. –°–ø–∏—Ä–∞–º.")
                    st.session_state.webcam_running = False
                    break

                frame_to_analyze_bgr = frame_bgr.copy()
                frame_display_bgr = frame_bgr.copy()

                try:
                    results = DeepFace.analyze(
                        img_path=frame_to_analyze_bgr,
                        actions=['age', 'gender', 'emotion'],
                        enforce_detection=True,
                        detector_backend=detector_backend_webcam,
                        silent=True
                    )

                    if isinstance(results, list) and len(results) > 0:
                        for face_info in results:
                            if 'region' in face_info and face_info['region']['w'] > 0 and face_info['region']['h'] > 0:
                                region = face_info['region']
                                x, y, w, h = region['x'], region['y'], region['w'], region['h']
                                age = face_info.get('age', "N/A")

                                gender_map = face_info.get('gender', {})
                                if isinstance(gender_map, dict) and gender_map:
                                    dominant_gender = max(
                                        gender_map, key=gender_map.get)
                                else:
                                    dominant_gender = face_info.get(
                                        'dominant_gender', "N/A")

                                emotion_map = face_info.get('emotion', {})
                                if isinstance(emotion_map, dict) and emotion_map:
                                    dominant_emotion = max(
                                        emotion_map, key=emotion_map.get)
                                else:
                                    dominant_emotion = face_info.get(
                                        'dominant_emotion', "N/A")

                                cv2.rectangle(
                                    frame_display_bgr, (x, y), (x + w, y + h), (0, 255, 0), 2)
                                text_gender_char = dominant_gender[0].upper(
                                ) if dominant_gender != "N/A" and isinstance(dominant_gender, str) else "N"
                                text = f"A:{age} G:{text_gender_char} E:{dominant_emotion}"
                                cv2.putText(frame_display_bgr, text, (x, y - 10),
                                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                except ValueError:
                    pass  # –ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ –ª–∏—Ü–∞ (–æ—Ç enforce_detection=True)
                except Exception as e:
                    # –ó–∞–ø–∏—Å–≤–∞–º–µ –¥—Ä—É–≥–∏ –≥—Ä–µ—à–∫–∏ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞, –Ω–æ –Ω–µ —Å–ø–∏—Ä–∞–º–µ –∫–∞–º–µ—Ä–∞—Ç–∞ –∑–∞—Ä–∞–¥–∏ —Ç—è—Ö
                    print(f"–ì—Ä–µ—à–∫–∞ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –æ—Ç —É–µ–± –∫–∞–º–µ—Ä–∞: {e}")
                    pass

                frame_display_rgb = cv2.cvtColor(
                    frame_display_bgr, cv2.COLOR_BGR2RGB)
                image_placeholder.image(frame_display_rgb, channels="RGB")

                time.sleep(0.01)

                if not st.session_state.webcam_running:  # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –æ—Ç–Ω–æ–≤–æ, –∞–∫–æ –±—É—Ç–æ–Ω "–°—Ç–æ–ø" –µ –Ω–∞—Ç–∏—Å–Ω–∞—Ç
                    break

            # –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ —Å–ª–µ–¥ –∫—Ä–∞—è –Ω–∞ —Ü–∏–∫—ä–ª–∞ –∏–ª–∏ –ø—Ä–∏ —Å–ø–∏—Ä–∞–Ω–µ
            if st.session_state.cap_webcam is not None:
                st.session_state.cap_webcam.release()
                st.session_state.cap_webcam = None
            image_placeholder.empty()
            if not st.session_state.webcam_running:  # –ê–∫–æ –µ —Å–ø—Ä—è–Ω–∞ –æ—Ç –±—É—Ç–æ–Ω "–°—Ç–æ–ø"
                st.info("–£–µ–± –∫–∞–º–µ—Ä–∞—Ç–∞ –µ —Å–ø—Ä—è–Ω–∞.")
            # –ê–∫–æ webcam_running –µ False (–Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞—Ä–∞–¥–∏ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ –∫–∞–¥—ä—Ä),
            # —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ "–£–µ–± –∫–∞–º–µ—Ä–∞—Ç–∞ –µ —Å–ø—Ä—è–Ω–∞." —â–µ —Å–µ –ø–æ–∫–∞–∂–µ –ø—Ä–∏ —Å–ª–µ–¥–≤–∞—â–æ—Ç–æ –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ,
            # –∞–∫–æ –Ω–µ –µ –≤–µ—á–µ –ø–æ–∫–∞–∑–∞–Ω–æ –¥—Ä—É–≥–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –≥—Ä–µ—à–∫–∞.

    # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ, –∞–∫–æ webcam_running –µ False, –Ω–æ cap –≤—Å–µ –æ—â–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    if not st.session_state.webcam_running:
        if st.session_state.get('cap_webcam') is not None:
            st.session_state.cap_webcam.release()
            st.session_state.cap_webcam = None
        image_placeholder.empty()
# --- END OF FILE app/webcam_realtime_analysis.py ---
